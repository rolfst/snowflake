{ config, options, lib, pkgs, ... }:

let
  inherit (builtins) map;
  inherit (lib) mkIf getExe;
in {
  config = mkIf (config.modules.shell.default == "nushell") {
    modules.shell.usefulPkgs.enable = true;

    # Custom shell modules:
    modules.shell.macchina.enable = true;
    modules.shell.xplr.enable = true;

    # Enable starship-rs:
    modules.shell.starship.enable = true;
    hm.programs.starship.enableNushellIntegration = true;

    # Enables vendor completion: https://nixos.wiki/wiki/nushell
    programs.nushell = {
      enable = true;
      envFile.text = ''
      # Nushell Environment Config File
      
      def create_left_prompt [] {
          let path_segment = ($env.PWD)
      
          $path_segment
      }
      
      def create_right_prompt [] {
          let time_segment = ([
              (date now | date format '%m/%d/%Y %r')
          ] | str collect)
      
          $time_segment
      }
      
      # Use nushell functions to define your right and left prompt
      let-env PROMPT_COMMAND = { create_left_prompt }
      let-env PROMPT_COMMAND_RIGHT = { create_right_prompt }
      
      # The prompt indicators are environmental variables that represent
      # the state of the prompt
      let-env PROMPT_INDICATOR = { "〉" }
      let-env PROMPT_INDICATOR_VI_INSERT = { ": " }
      let-env PROMPT_INDICATOR_VI_NORMAL = { "〉" }
      let-env PROMPT_MULTILINE_INDICATOR = { "::: " }
      
      # Specifies how environment variables are:
      # - converted from a string to a value on Nushell startup (from_string)
      # - converted from a value back to a string when running external commands (to_string)
      # Note: The conversions happen *after* config.nu is loaded
      let-env ENV_CONVERSIONS = {
        "PATH": {
          from_string: { |s| $s | split row (char esep) }
          to_string: { |v| $v | str collect (char esep) }
        }
        "Path": {
          from_string: { |s| $s | split row (char esep) }
          to_string: { |v| $v | str collect (char esep) }
        }
      }
      
      # Directories to search for scripts when calling source or use
      #
      # By default, <nushell-config-dir>/scripts is added
      let-env NU_LIB_DIRS = [
          ($nu.config-path | path dirname | path join 'scripts')
      ]
      
      # Directories to search for plugin binaries when calling register
      #
      # By default, <nushell-config-dir>/plugins is added
      let-env NU_PLUGIN_DIRS = [
          ($nu.config-path | path dirname | path join 'plugins')
      ]
      
      # To add entries to PATH (on Windows you might use Path), you can use the following pattern:
      # let-env PATH = ($env.PATH | prepend '/some/path')
          '';
          configFile.text = ''
        # TODO: Completions
        module completions {
          # Custom completions for external commands (those outside of Nushell)
          # Each completions has two parts: the form of the external command, including its flags and parameters
          # and a helper command that knows how to complete values for those flags and parameters
          #
          # This is a simplified version of completions for git branches and git remotes
          def "nu-complete git branches" [] {
            ^git branch | lines | each { |line| \$line | str replace '[\*\+] ' "" | str trim }
          }
        
          def "nu-complete git remotes" [] {
            ^git remote | lines | each { |line| \$line | str trim }
          }
        
          export extern "git checkout" [
            branch?: string@"nu-complete git branches" # name of the branch to checkout
            -b: string                                 # create and checkout a new branch
            -B: string                                 # create/reset and checkout a branch
            -l                                         # create reflog for new branch
            --guess                                    # second guess 'git checkout <no-such-branch>' (default)
            --overlay                                  # use overlay mode (default)
            --quiet(-q)                                # suppress progress reporting
            --recurse-submodules: string               # control recursive updating of submodules
            --progress                                 # force progress reporting
            --merge(-m)                                # perform a 3-way merge with the new branch
            --conflict: string                         # conflict style (merge or diff3)
            --detach(-d)                               # detach HEAD at named commit
            --track(-t)                                # set upstream info for new branch
            --force(-f)                                # force checkout (throw away local modifications)
            --orphan: string                           # new unparented branch
            --overwrite-ignore                         # update ignored files (default)
            --ignore-other-worktrees                   # do not check if another worktree is holding the given ref
            --ours(-2)                                 # checkout our version for unmerged files
            --theirs(-3)                               # checkout their version for unmerged files
            --patch(-p)                                # select hunks interactively
            --ignore-skip-worktree-bits                # do not limit pathspecs to sparse entries only
            --pathspec-from-file: string               # read pathspec from file
          ]
        
          export extern "git push" [
            remote?: string@"nu-complete git remotes", # the name of the remote
            refspec?: string@"nu-complete git branches"# the branch / refspec
            --verbose(-v)                              # be more verbose
            --quiet(-q)                                # be more quiet
            --repo: string                             # repository
            --all                                      # push all refs
            --mirror                                   # mirror all refs
            --delete(-d)                               # delete refs
            --tags                                     # push tags (can't be used with --all or --mirror)
            --dry-run(-n)                              # dry run
            --porcelain                                # machine-readable output
            --force(-f)                                # force updates
            --force-with-lease: string                 # require old value of ref to be at this value
            --recurse-submodules: string               # control recursive pushing of submodules
            --thin                                     # use thin pack
            --receive-pack: string                     # receive pack program
            --exec: string                             # receive pack program
            --set-upstream(-u)                         # set upstream for git pull/status
            --progress                                 # force progress reporting
            --prune                                    # prune locally removed refs
            --no-verify                                # bypass pre-push hook
            --follow-tags                              # push missing but relevant tags
            --signed: string                           # GPG sign the push
            --atomic                                   # request atomic transaction on remote side
            --push-option(-o): string                  # option to transmit
            --ipv4(-4)                                 # use IPv4 addresses only
            --ipv6(-6)                                 # use IPv6 addresses only
          ]
        }
      
        module prompt {
            export env STARSHIP_SHELL {"nu"}
            export env PROMPT_COMMAND {{ left_prompt }}
            export env PROMPT_COMMAND_RIGHT {{ right_prompt }}
            export env PROMPT_INDICATOR {""}
      
            def left_prompt [] {
              starship prompt
            }
      
            def right_prompt [] {
              ""
            }
        }
      
      
        # Get just the extern definitions without the custom completion commands
        use completions *
        use prompt *
      
        # Direnv Nushell helper
        def-env "direnv nu" [] {
          ^direnv export elvish | from json | load-env
        }
      
        # Aliases
        alias "nix build-log" = nix build --log-format bar-with-log
        alias "nix prefetch github" = nix-prefetch-github
        alias "ls pci-devs" = (lspci -m | lines | parse -r '(?P<slot>.{2}:.{2}\..) "(?P<class>[^"]+)" "(?P<vendor_name>[^"]+)" "(?P<name>[^"]+)"(?P<flag_info> -\S+)? "(?P<subsystem_vendor>[^"]*)?" "(?P<subsystem_name>[^"]*)')
      
        def "nixos rebuild" [subcmd flake ...args] {
          nixos-rebuild $subcmd --flake $flake $args
        }
      
        # for more information on themes see
        # https://www.nushell.sh/book/coloring_and_theming.html
        let default_theme = {
            # color for nushell primitives
            separator: white
            leading_trailing_space_bg: { attr: n } # no fg, no bg, attr none effectively turns this off
            header: green_bold
            empty: blue
            bool: white
            int: white
            filesize: white
            duration: white
            date: white
            range: white
            float: white
            string: white
            nothing: white
            binary: white
            cellpath: white
            row_index: green_bold
            record: white
            list: white
            block: white
            hints: dark_gray
      
            # shapes are used to change the cli syntax highlighting
            shape_garbage: { fg: "#FFFFFF" bg: "#FF0000" attr: b}
            shape_binary: purple_bold
            shape_bool: light_cyan
            shape_int: purple_bold
            shape_float: purple_bold
            shape_range: yellow_bold
            shape_internalcall: cyan_bold
            shape_external: cyan
            shape_externalarg: green_bold
            shape_literal: blue
            shape_operator: yellow
            shape_signature: green_bold
            shape_string: green
            shape_string_interpolation: cyan_bold
            shape_datetime: cyan_bold
            shape_list: cyan_bold
            shape_table: blue_bold
            shape_record: cyan_bold
            shape_block: blue_bold
            shape_filepath: cyan
            shape_globpattern: cyan_bold
            shape_variable: purple
            shape_flag: blue_bold
            shape_custom: green
            shape_nothing: light_cyan
        }
      
        # The default config record. This is where much of your global configuration is setup.
        let \$config = {
          filesize_metric: false
          table_mode: rounded # basic, compact, compact_double, light, thin, with_love, rounded, reinforced, heavy, none, other
          use_ls_colors: true
          rm_always_trash: false
          color_config: \$default_theme
          use_grid_icons: true
          footer_mode: "25" # always, never, number_of_rows, auto
          quick_completions: false  # set this to false to prevent auto-selecting completions when only one remains
          partial_completions: true  # set this to false to prevent partial filling of the prompt
          animate_prompt: false # redraw the prompt every second
          float_precision: 2
          use_ansi_coloring: true
          filesize_format: "auto" # b, kb, kib, mb, mib, gb, gib, tb, tib, pb, pib, eb, eib, zb, zib, auto
          edit_mode: vi # emacs, vi
          max_history_size: 10000 # Session has to be reloaded for this to take effect
          sync_history_on_enter: true # Enable to share the history between multiple sessions, else you have to close the session to persist history to file
          menus: [
              # Configuration for default nushell menus
              # Note the lack of souce parameter
              {
                name: completion_menu
                only_buffer_difference: false
                marker: "| "
                type: {
                    layout: columnar
                    columns: 4
                    col_width: 20   # Optional value. If missing all the screen width is used to calculate column width
                    col_padding: 2
                }
                style: {
                    text: green
                    selected_text: green_reverse
                    description_text: yellow
                }
              }
              {
                name: history_menu
                only_buffer_difference: true
                marker: "? "
                type: {
                    layout: list
                    page_size: 10
                }
                style: {
                    text: green
                    selected_text: green_reverse
                    description_text: yellow
                }
              }
              {
                name: help_menu
                only_buffer_difference: true
                marker: "? "
                type: {
                    layout: description
                    columns: 4
                    col_width: 20   # Optional value. If missing all the screen width is used to calculate column width
                    col_padding: 2
                    selection_rows: 4
                    description_rows: 10
                }
                style: {
                    text: green
                    selected_text: green_reverse
                    description_text: yellow
                }
              }
              # Example of extra menus created using a nushell source
              # Use the source field to create a list of records that populates
              # the menu
              {
                name: commands_menu
                only_buffer_difference: false
                marker: "# "
                type: {
                    layout: columnar
                    columns: 4
                    col_width: 20
                    col_padding: 2
                }
                style: {
                    text: green
                    selected_text: green_reverse
                    description_text: yellow
                }
                source: { |buffer, position|
                    $nu.scope.commands
                    | where command =~ $buffer
                    | each { |it| {value: $it.command description: $it.usage} }
                }
              }
              {
                name: vars_menu
                only_buffer_difference: true
                marker: "# "
                type: {
                    layout: list
                    page_size: 10
                }
                style: {
                    text: green
                    selected_text: green_reverse
                    description_text: yellow
                }
                source: { |buffer, position|
                    $nu.scope.vars
                    | where name =~ $buffer
                    | sort-by name
                    | each { |it| {value: $it.name description: $it.type} }
                }
              }
              {
                name: commands_with_description
                only_buffer_difference: true
                marker: "# "
                type: {
                    layout: description
                    columns: 4
                    col_width: 20
                    col_padding: 2
                    selection_rows: 4
                    description_rows: 10
                }
                style: {
                    text: green
                    selected_text: green_reverse
                    description_text: yellow
                }
                source: { |buffer, position|
                    $nu.scope.commands
                    | where command =~ $buffer
                    | each { |it| {value: $it.command description: $it.usage} }
                }
              }
          ]
          keybindings: [
            {
              name: completion_menu
              modifier: none
              keycode: tab
              mode: emacs # Options: emacs vi_normal vi_insert
              event: {
                until: [
                  { send: menu name: completion_menu }
                  { send: menunext }
                ]
              }
            }
            {
              name: completion_previous
              modifier: shift
              keycode: backtab
              mode: [emacs, vi_normal, vi_insert] # Note: You can add the same keybinding to all modes by using a list
              event: { send: menuprevious }
            }
            {
              name: history_menu
              modifier: control
              keycode: char_x
              mode: emacs
              event: {
                until: [
                  { send: menu name: history_menu }
                  { send: menupagenext }
                ]
              }
            }
            {
              name: history_previous
              modifier: control
              keycode: char_z
              mode: emacs
              event: {
                until: [
                  { send: menupageprevious }
                  { edit: undo }
                ]
              }
            }
            # Keybindings used to trigger the user defined menus
            {
              name: commands_menu
              modifier: control
              keycode: char_t
              mode: [emacs, vi_normal, vi_insert]
              event: { send: menu name: commands_menu }
            }
            {
              name: vars_menu
              modifier: control
              keycode: char_y
              mode: [emacs, vi_normal, vi_insert]
              event: { send: menu name: vars_menu }
            }
            {
              name: commands_with_description
              modifier: control
              keycode: char_u
              mode: [emacs, vi_normal, vi_insert]
              event: { send: menu name: commands_with_description }
            }
          ]
        }
        '';
    }

    hm.programs.nushell = {
      enable = true;
      # useBabelnushell = true;

      shellAliases = {
        exa = "exa --group-directories-first";
        less = "less -R";
      };
      # shellAbbrs = import "${config.snowflake.configDir}/shell-abbr";

      # functions = {
      #   nushell_title = "echo $argv[1]";
      #   sysdate = ''
      #     nixos-rebuild switch --use-remote-sudo --flake .#(hostname) --impure
      #   '';
      # };

      # interactiveShellInit = ''
      #   ${getExe pkgs.any-nix-shell} nushell --info-right | source
      #   ${getExe pkgs.zoxide} init nushell | source
      #   ${getExe pkgs.direnv} hook nushell | source
      #
      #   # Vi-Bindings:
      #   set nushell_greeting
      #   set -g nushell_key_bindings nushell_vi_key_bindings
      #
      #   # Color our Man-pages:
      #   set -xU LESS_TERMCAP_md (printf "\e[01;31m")
      #   set -xU LESS_TERMCAP_me (printf "\e[0m")
      #   set -xU LESS_TERMCAP_se (printf "\e[0m")
      #   set -xU LESS_TERMCAP_so (printf "\e[01;44;33m")
      #   set -xU LESS_TERMCAP_ue (printf "\e[0m")
      #   set -xU LESS_TERMCAP_us (printf "\e[01;32m"t)
      # '';
      #
      # plugins = let
      #   mkPlugin = name: {
      #     inherit name;
      #     inherit (pkgs.nushellPlugins."${name}") src;
      #   };
      # in map (p: mkPlugin p) [ "done" "autopair-nushell" "fzf-nushell" ];
    };

    # home.configFile = let inherit (config.modules.themes) active;
    # in (mkIf (active != null) {
    #   nushell-fzf-theme = {
    #     target = "nushell/conf.d/fzf.nushell";
    #     text = let inherit (config.modules.themes.colors.main) normal types;
    #     in ''
    #           set -Ux FZF_DEFAULT_OPTS "\
    #       --color=bg:,bg+:${types.bg},spinner:${types.panelbg},hl:${normal.red} \
    #       --color=fg:${types.border},header:${normal.red},info:${normal.magenta},pointer:${types.border} \
    #       --color=marker:${normal.magenta},fg+:${types.border},prompt:${types.border},hl+:${normal.red}"
    #     '';
    #   };
    #
    #   nushell-theme = {
    #     target = "nushell/conf.d/${active}.nushell";
    #     text = let
    #       inherit (config.modules.themes.colors.nushell)
    #         fg highlight base01 base02 base03 base04 base05 base06 base07 base08
    #         base09 base10;
    #     in ''
    #       # --> General
    #       set -l foreground ${fg}
    #       set -l highlight  ${highlight}
    #
    #       # --> palette
    #       set -l base01     ${base01}
    #       set -l base02     ${base02}
    #       set -l base03     ${base03}
    #       set -l base04     ${base04}
    #       set -l base05     ${base05}
    #       set -l base06     ${base06}
    #       set -l base07     ${base07}
    #       set -l base08     ${base08}
    #       set -l base09     ${base09}
    #       set -l base10     ${base10}
    #
    #       # Syntax Highlighting
    #       set -g nushell_color_normal                     $foreground
    #       set -g nushell_color_command                    $base09
    #       set -g nushell_color_param                      $base02
    #       set -g nushell_color_keyword                    $base08
    #       set -g nushell_color_quote                      $base07
    #       set -g nushell_color_redirection                $foreground
    #       set -g nushell_color_end                        $base06
    #       set -g nushell_color_error                      $base05
    #       set -g nushell_color_gray                       $base10
    #       set -g nushell_color_selection     --background=$highlight
    #       set -g nushell_color_search_match  --background=$highlight
    #       set -g nushell_color_operator                   $base04
    #       set -g nushell_color_escape                     $base08
    #       set -g nushell_color_autosuggestion             $base10
    #       set -g nushell_color_cancel                     $base05
    #
    #       # Prompt
    #       set -g nushell_color_cwd                        $base08
    #       set -g nushell_color_user                       $base01
    #       set -g nushell_color_host                       $base09
    #
    #       # Completion Pager
    #       set -g nushell_pager_color_progress             $base10
    #       set -g nushell_pager_color_prefix               $base07
    #       set -g nushell_pager_color_completion           $foreground
    #       set -g nushell_pager_color_description          $base10
    #     '';
    #   };
    # });
  };
}
